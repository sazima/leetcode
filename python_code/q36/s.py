"""
36. 有效的数独
请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）


注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
空白格用 '.' 表示。


示例 1：


输入：board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。


提示：

board.length == 9
board[i].length == 9
board[i][j] 是一位数字（1-9）或者 '.'
"""
from typing import List


class Solution:
    map_ = {0: {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 2, 7: 2, 8: 2, 9: 2}, 1: {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 2, 7: 2, 8: 2, 9: 2}, 2: {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 2, 7: 2, 8: 2, 9: 2}, 3: {0: 3, 1: 3, 2: 3, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 5, 9: 5}, 4: {0: 3, 1: 3, 2: 3, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 5, 9: 5}, 5: {0: 3, 1: 3, 2: 3, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 5, 9: 5}, 6: {0: 6, 1: 6, 2: 6, 3: 7, 4: 7, 5: 7, 6: 8, 7: 8, 8: 8, 9: 8}, 7: {0: 6, 1: 6, 2: 6, 3: 7, 4: 7, 5: 7, 6: 8, 7: 8, 8: 8, 9: 8}, 8: {0: 6, 1: 6, 2: 6, 3: 7, 4: 7, 5: 7, 6: 8, 7: 8, 8: 8, 9: 8}, 9: {0: 6, 1: 6, 2: 6, 3: 7, 4: 7, 5: 7, 6: 8, 7: 8, 8: 8, 9: 8}}

    def get_fangkuai_index_by_i_and_j(self, i: int, j: int) -> int:
        return self.map_[i][j]
        # if i <= 2:
        #     if j <= 2:
        #         return 0
        #     elif j <= 5:
        #         return 1
        #     else:
        #         return 2
        # elif i <= 5:
        #     if j <= 2:
        #         return 3
        #     elif j <= 5:
        #         return 4
        #     else:
        #         return 5
        # else:
        #     if j <= 2:
        #         return 6
        #     elif j <= 5:
        #         return 7
        #     else:
        #         return 8

    def isValidSudoku(self, board: List[List[str]]) -> bool:
        heng = [[] for _ in range(1, 10)]  # type: List[List[str]]  #
        zong = [[] for _ in range(1, 10)]  # type: List[List[str]]

        fangkuai = [[] for _ in range(1, 10)]  # type: List[List[str]]  # 第几个方框中的数字

        for i in range(0, 9):
            for j in range(0, 9):
                value = board[i][j]
                fangkuai_inddex = self.get_fangkuai_index_by_i_and_j(i, j)
                if value != '.' and (value in heng[j] or value in zong[i] or value in fangkuai[fangkuai_inddex]):
                    return False
                heng[j].append(value)
                zong[i].append(value)
                fangkuai[fangkuai_inddex].append(value)
        return True




if __name__ == '__main__':
    a = [["6", "3", ".", ".", "7", ".", ".", ".", "."]
        , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
        , [".", "9", "8", ".", ".", ".", ".", "6", "."]
        , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
        , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
        , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
        , [".", "6", ".", ".", ".", ".", "2", "8", "."]
        , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
        , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

    print(Solution().isValidSudoku(a))
    result = {}
    for i in range(0, 10):
        for j in range(10):
            result.setdefault(i, {})
            result[i][j] = Solution().get_fangkuai_index_by_i_and_j(i, j)
    print(result)
